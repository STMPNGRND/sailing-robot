#!/usr/bin/env python
"""
Node looks up correct sail setting from table
Subscribes: wind direction apparent
Sets sail actuator to correct PWM value
"""
import rospy
from std_msgs.msg import Float64, Float32
import pigpio
from sailing_robot.sail_table import SailTable

SAILGPIO = 24

# get dictionary for the boat specific sail PWM settings
sail_table_dict = rospy.get_param('sailsettings/table')
minPWM = rospy.get_param('sail/servolowerlimits')
maxPWM = rospy.get_param('sail/servohigherlimits')
windSpeed = rospy.get_param('sailsettings/windSpeed')

sail_table = SailTable(sail_table_dict)

def sail_servo_update(msg):
    windDirection = msg.data
    if windDirection > 180:
        windDirection = 360 - windDirection

    sheet_normalized = sail_table.interpolate_sail_setting(windDirection)
    debug_pub.publish(sheet_normalized)

    # calculate actual PWM value from limits
    sheetPWM = (sheet_normalized * (maxPWM-minPWM)) + minPWM
    piPWM.set_servo_pulsewidth(SAILGPIO, sheetPWM)

if __name__ == '__main__':
    piPWM = pigpio.pi();
    piPWM.set_mode(SAILGPIO, pigpio.OUTPUT) # GPIO 24/RPi PIN 18 as sail servo pin
    try:
        debug_pub = rospy.Publisher('debug_sailsheet_normalized', Float32, queue_size=10)
        rospy.init_node('actuator_driver_sail', anonymous=True)
        rospy.Subscriber('wind_direction_apparent', Float64, sail_servo_update)
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
